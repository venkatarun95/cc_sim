/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_congestion_ops {
    pub list: list_head,
    pub flags: ::std::os::raw::c_ulong,
    pub non_restricted: ::std::os::raw::c_int,
    pub init: ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock)>,
    pub release: ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock)>,
    pub ssthresh:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub min_cwnd:
        ::std::option::Option<unsafe extern "C" fn(sk: *const tcp_sock) -> ::std::os::raw::c_ulong>,
    pub cong_avoid: ::std::option::Option<
        unsafe extern "C" fn(
            sk: *mut tcp_sock,
            ack: ::std::os::raw::c_ulong,
            rtt: ::std::os::raw::c_ulong,
            in_flight: ::std::os::raw::c_ulong,
            good_ack: ::std::os::raw::c_int,
        ),
    >,
    pub rtt_sample: ::std::option::Option<
        unsafe extern "C" fn(sk: *mut tcp_sock, usrtt: ::std::os::raw::c_ulong),
    >,
    pub set_state: ::std::option::Option<
        unsafe extern "C" fn(sk: *mut tcp_sock, new_state: ::std::os::raw::c_uchar),
    >,
    pub cwnd_event:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock, ev: tcp_ca_event)>,
    pub undo_cwnd:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub pkts_acked: ::std::option::Option<
        unsafe extern "C" fn(
            sk: *mut tcp_sock,
            num_acked: ::std::os::raw::c_ulong,
            last: ::std::os::raw::c_longlong,
        ),
    >,
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(sk: *mut tcp_sock, ext: ::std::os::raw::c_ulong, skb: *mut sk_buff),
    >,
    pub cong_control:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock, rs: *const rate_sample)>,
    pub sndbuf_expand:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub min_tso_segs:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub name: [::std::os::raw::c_char; 16usize],
    pub owner: *mut module,
}
#[test]
fn bindgen_test_layout_tcp_congestion_ops() {
    assert_eq!(
        ::std::mem::size_of::<tcp_congestion_ops>(),
        176usize,
        concat!("Size of: ", stringify!(tcp_congestion_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_congestion_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_congestion_ops))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_congestion_ops>())).non_restricted as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(non_restricted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).init as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).release as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).ssthresh as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(ssthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).min_cwnd as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(min_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).cong_avoid as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(cong_avoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).rtt_sample as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(rtt_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).set_state as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(set_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).cwnd_event as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(cwnd_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).undo_cwnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(undo_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).pkts_acked as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(pkts_acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).get_info as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).cong_control as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(cong_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_congestion_ops>())).sndbuf_expand as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(sndbuf_expand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).min_tso_segs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(min_tso_segs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).name as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).owner as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(owner)
        )
    );
}
pub const tcp_ca_event_CA_EVENT_TX_START: tcp_ca_event = 0;
pub const tcp_ca_event_CA_EVENT_CWND_RESTART: tcp_ca_event = 1;
pub const tcp_ca_event_CA_EVENT_COMPLETE_CWR: tcp_ca_event = 2;
pub const tcp_ca_event_CA_EVENT_FRTO: tcp_ca_event = 3;
pub const tcp_ca_event_CA_EVENT_LOSS: tcp_ca_event = 4;
pub const tcp_ca_event_CA_EVENT_FAST_ACK: tcp_ca_event = 5;
pub const tcp_ca_event_CA_EVENT_SLOW_ACK: tcp_ca_event = 6;
pub type tcp_ca_event = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub prev: *mut list_head,
    pub next: *mut list_head,
    pub file_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_list_head() {
    assert_eq!(
        ::std::mem::size_of::<list_head>(),
        24usize,
        concat!("Size of: ", stringify!(list_head))
    );
    assert_eq!(
        ::std::mem::align_of::<list_head>(),
        8usize,
        concat!("Alignment of ", stringify!(list_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).file_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(file_name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_options_received {
    pub rcv_tsval: ::std::os::raw::c_ulong,
    pub rcv_tsecr: ::std::os::raw::c_ulong,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_tcp_options_received() {
    assert_eq!(
        ::std::mem::size_of::<tcp_options_received>(),
        24usize,
        concat!("Size of: ", stringify!(tcp_options_received))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_options_received>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_options_received))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_options_received>())).rcv_tsval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_options_received),
            "::",
            stringify!(rcv_tsval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_options_received>())).rcv_tsecr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_options_received),
            "::",
            stringify!(rcv_tsecr)
        )
    );
}
impl tcp_options_received {
    #[inline]
    pub fn saw_tstamp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_saw_tstamp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dump_xxx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_dump_xxx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        saw_tstamp: ::std::os::raw::c_uint,
        dump_xxx: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let saw_tstamp: u32 = unsafe { ::std::mem::transmute(saw_tstamp) };
            saw_tstamp as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let dump_xxx: u32 = unsafe { ::std::mem::transmute(dump_xxx) };
            dump_xxx as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct minmax_sample {
    pub t: ::std::os::raw::c_ulong,
    pub v: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_minmax_sample() {
    assert_eq!(
        ::std::mem::size_of::<minmax_sample>(),
        16usize,
        concat!("Size of: ", stringify!(minmax_sample))
    );
    assert_eq!(
        ::std::mem::align_of::<minmax_sample>(),
        8usize,
        concat!("Alignment of ", stringify!(minmax_sample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<minmax_sample>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(minmax_sample),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<minmax_sample>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(minmax_sample),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct minmax {
    pub s: [minmax_sample; 3usize],
}
#[test]
fn bindgen_test_layout_minmax() {
    assert_eq!(
        ::std::mem::size_of::<minmax>(),
        48usize,
        concat!("Size of: ", stringify!(minmax))
    );
    assert_eq!(
        ::std::mem::align_of::<minmax>(),
        8usize,
        concat!("Alignment of ", stringify!(minmax))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<minmax>())).s as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(minmax), "::", stringify!(s))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_sock {
    pub sk_state: ::std::os::raw::c_int,
    pub snd_nxt: ::std::os::raw::c_ulong,
    pub snd_una: ::std::os::raw::c_ulong,
    pub mss_cache: ::std::os::raw::c_ulong,
    pub tcp_mstamp: ::std::os::raw::c_ulonglong,
    pub srtt_us: ::std::os::raw::c_ulonglong,
    pub mdev_us: ::std::os::raw::c_ulong,
    pub mdev_max_us: ::std::os::raw::c_ulong,
    pub rttvar_us: ::std::os::raw::c_ulong,
    pub rtt_seq: ::std::os::raw::c_ulong,
    pub rtt_min: minmax,
    pub packets_out: ::std::os::raw::c_ulong,
    pub left_out: ::std::os::raw::c_ulong,
    pub retrans_out: ::std::os::raw::c_ulong,
    pub rx_opt: tcp_options_received,
    pub snd_ssthresh: ::std::os::raw::c_ulong,
    pub snd_cwnd: ::std::os::raw::c_ulong,
    pub snd_cwnd_cnt: ::std::os::raw::c_uint,
    pub snd_cwnd_clamp: ::std::os::raw::c_uint,
    pub snd_cwnd_stamp: ::std::os::raw::c_ulong,
    pub bytes_acked: ::std::os::raw::c_ulong,
    pub lost: ::std::os::raw::c_ulong,
    pub app_limited: ::std::os::raw::c_ulong,
    pub first_tx_mstamp: ::std::os::raw::c_ulonglong,
    pub delivered_mstamp: ::std::os::raw::c_ulonglong,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub rate_delivered: ::std::os::raw::c_ulong,
    pub rate_interval_us: ::std::os::raw::c_ulong,
    pub sk_pacing_status: ::std::os::raw::c_ulong,
    pub sk_pacing_rate: ::std::os::raw::c_ulong,
    pub sk_max_pacing_rate: ::std::os::raw::c_ulong,
    pub sk_pacing_shift: ::std::os::raw::c_uchar,
    pub delivered: ::std::os::raw::c_ulong,
    pub tcp_wstamp_ns: ::std::os::raw::c_ulonglong,
    pub tcp_clock_cache: ::std::os::raw::c_ulonglong,
    pub send_timestamp_us: ::std::os::raw::c_ulonglong,
    pub intersend_time: ::std::os::raw::c_ulonglong,
    pub lost_out: ::std::os::raw::c_ulong,
    pub sacked_out: ::std::os::raw::c_ulong,
    pub fackets_out: ::std::os::raw::c_ulong,
    pub icsk_ca_ops: *mut tcp_congestion_ops,
    pub icsk_ca_state: ::std::os::raw::c_uchar,
    pub icsk_ca_priv: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout_tcp_sock() {
    assert_eq!(
        ::std::mem::size_of::<tcp_sock>(),
        512usize,
        concat!("Size of: ", stringify!(tcp_sock))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_sock>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_sock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_nxt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_nxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_una as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_una)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).mss_cache as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(mss_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).tcp_mstamp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(tcp_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).srtt_us as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(srtt_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).mdev_us as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(mdev_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).mdev_max_us as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(mdev_max_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rttvar_us as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rttvar_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rtt_seq as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rtt_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rtt_min as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rtt_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).packets_out as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(packets_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).left_out as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(left_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).retrans_out as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(retrans_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rx_opt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rx_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_ssthresh as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_ssthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd_cnt as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd_clamp as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd_clamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd_stamp as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd_stamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).bytes_acked as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(bytes_acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).lost as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(lost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).app_limited as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(app_limited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).first_tx_mstamp as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(first_tx_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).delivered_mstamp as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(delivered_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rate_delivered as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rate_delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rate_interval_us as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rate_interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_pacing_status as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_pacing_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_pacing_rate as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_pacing_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_max_pacing_rate as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_max_pacing_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_pacing_shift as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_pacing_shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).delivered as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).tcp_wstamp_ns as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(tcp_wstamp_ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).tcp_clock_cache as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(tcp_clock_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).send_timestamp_us as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(send_timestamp_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).intersend_time as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(intersend_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).lost_out as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(lost_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sacked_out as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sacked_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).fackets_out as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(fackets_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).icsk_ca_ops as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(icsk_ca_ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).icsk_ca_state as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(icsk_ca_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).icsk_ca_priv as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(icsk_ca_priv)
        )
    );
}
impl tcp_sock {
    #[inline]
    pub fn rate_app_limited(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rate_app_limited(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rate_app_limited: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rate_app_limited: u8 = unsafe { ::std::mem::transmute(rate_app_limited) };
            rate_app_limited as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_skb_cb {
    pub seq: ::std::os::raw::c_ulong,
    pub end_seq: ::std::os::raw::c_ulong,
    pub tcp_flags: ::std::os::raw::c_uchar,
    pub sacked: ::std::os::raw::c_uchar,
    pub ip_dsfield: ::std::os::raw::c_uchar,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub ack_seq: ::std::os::raw::c_ulong,
    pub tx: tcp_skb_cb__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_skb_cb__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub delivered: ::std::os::raw::c_ulong,
    pub first_tx_mstamp: ::std::os::raw::c_ulonglong,
    pub delivered_mstamp: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_tcp_skb_cb__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tcp_skb_cb__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(tcp_skb_cb__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_skb_cb__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_skb_cb__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_skb_cb__bindgen_ty_1>())).delivered as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb__bindgen_ty_1),
            "::",
            stringify!(delivered)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_skb_cb__bindgen_ty_1>())).first_tx_mstamp as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb__bindgen_ty_1),
            "::",
            stringify!(first_tx_mstamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_skb_cb__bindgen_ty_1>())).delivered_mstamp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb__bindgen_ty_1),
            "::",
            stringify!(delivered_mstamp)
        )
    );
}
impl tcp_skb_cb__bindgen_ty_1 {
    #[inline]
    pub fn in_flight(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u64) }
    }
    #[inline]
    pub fn set_in_flight(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn is_app_limited(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_is_app_limited(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        in_flight: ::std::os::raw::c_ulong,
        is_app_limited: ::std::os::raw::c_ulong,
        unused: ::std::os::raw::c_ulong,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let in_flight: u64 = unsafe { ::std::mem::transmute(in_flight) };
            in_flight as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let is_app_limited: u64 = unsafe { ::std::mem::transmute(is_app_limited) };
            is_app_limited as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let unused: u64 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_tcp_skb_cb() {
    assert_eq!(
        ::std::mem::size_of::<tcp_skb_cb>(),
        64usize,
        concat!("Size of: ", stringify!(tcp_skb_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_skb_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_skb_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).end_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(end_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).tcp_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(tcp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).sacked as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(sacked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).ip_dsfield as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(ip_dsfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).ack_seq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(ack_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).tx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(tx)
        )
    );
}
impl tcp_skb_cb {
    #[inline]
    pub fn txstamp_ack(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_txstamp_ack(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn eor(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_eor(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_rxtstamp(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_rxtstamp(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        txstamp_ack: ::std::os::raw::c_uchar,
        eor: ::std::os::raw::c_uchar,
        has_rxtstamp: ::std::os::raw::c_uchar,
        unused: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let txstamp_ack: u8 = unsafe { ::std::mem::transmute(txstamp_ack) };
            txstamp_ack as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let eor: u8 = unsafe { ::std::mem::transmute(eor) };
            eor as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_rxtstamp: u8 = unsafe { ::std::mem::transmute(has_rxtstamp) };
            has_rxtstamp as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let unused: u8 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_buff {
    pub cb: tcp_skb_cb,
    pub skb_mstamp_ns: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_sk_buff() {
    assert_eq!(
        ::std::mem::size_of::<sk_buff>(),
        72usize,
        concat!("Size of: ", stringify!(sk_buff))
    );
    assert_eq!(
        ::std::mem::align_of::<sk_buff>(),
        8usize,
        concat!("Alignment of ", stringify!(sk_buff))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sk_buff>())).cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sk_buff),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sk_buff>())).skb_mstamp_ns as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sk_buff),
            "::",
            stringify!(skb_mstamp_ns)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rate_sample {
    pub prior_mstamp: ::std::os::raw::c_ulonglong,
    pub prior_delivered: ::std::os::raw::c_ulong,
    pub delivered: ::std::os::raw::c_long,
    pub interval_us: ::std::os::raw::c_long,
    pub snd_interval_us: ::std::os::raw::c_ulong,
    pub rcv_interval_us: ::std::os::raw::c_ulong,
    pub rtt_us: ::std::os::raw::c_long,
    pub losses: ::std::os::raw::c_int,
    pub acked_sacked: ::std::os::raw::c_ulong,
    pub prior_in_flight: ::std::os::raw::c_ulong,
    pub is_app_limited: bool,
    pub is_retrans: bool,
    pub is_ack_delayed: bool,
}
#[test]
fn bindgen_test_layout_rate_sample() {
    assert_eq!(
        ::std::mem::size_of::<rate_sample>(),
        88usize,
        concat!("Size of: ", stringify!(rate_sample))
    );
    assert_eq!(
        ::std::mem::align_of::<rate_sample>(),
        8usize,
        concat!("Alignment of ", stringify!(rate_sample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).prior_mstamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(prior_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).prior_delivered as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(prior_delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).delivered as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).interval_us as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).snd_interval_us as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(snd_interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).rcv_interval_us as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(rcv_interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).rtt_us as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(rtt_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).losses as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(losses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).acked_sacked as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(acked_sacked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).prior_in_flight as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(prior_in_flight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).is_app_limited as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(is_app_limited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).is_retrans as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(is_retrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).is_ack_delayed as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(is_ack_delayed)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct node {
    pub next: *mut node,
    pub prev: *mut node,
    pub skb: sk_buff,
    pub seqnum: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_node() {
    assert_eq!(
        ::std::mem::size_of::<node>(),
        96usize,
        concat!("Size of: ", stringify!(node))
    );
    assert_eq!(
        ::std::mem::align_of::<node>(),
        8usize,
        concat!("Alignment of ", stringify!(node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).skb as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(node), "::", stringify!(skb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).seqnum as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(seqnum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct map {
    pub size: ::std::os::raw::c_int,
    pub start: *mut node,
}
#[test]
fn bindgen_test_layout_map() {
    assert_eq!(
        ::std::mem::size_of::<map>(),
        16usize,
        concat!("Size of: ", stringify!(map))
    );
    assert_eq!(
        ::std::mem::align_of::<map>(),
        8usize,
        concat!("Alignment of ", stringify!(map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<map>())).size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(map), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<map>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(map),
            "::",
            stringify!(start)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BBR {
    pub to_be_acked: ::std::os::raw::c_int,
    pub sk: tcp_sock,
    pub padding: [::std::os::raw::c_uchar; 64usize],
    pub rs: rate_sample,
    pub seqnum_map: map,
}
#[test]
fn bindgen_test_layout_BBR() {
    assert_eq!(
        ::std::mem::size_of::<BBR>(),
        688usize,
        concat!("Size of: ", stringify!(BBR))
    );
    assert_eq!(
        ::std::mem::align_of::<BBR>(),
        8usize,
        concat!("Alignment of ", stringify!(BBR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).to_be_acked as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BBR),
            "::",
            stringify!(to_be_acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).sk as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(BBR), "::", stringify!(sk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).padding as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(BBR),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).rs as *const _ as usize },
        584usize,
        concat!("Offset of field: ", stringify!(BBR), "::", stringify!(rs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).seqnum_map as *const _ as usize },
        672usize,
        concat!(
            "Offset of field: ",
            stringify!(BBR),
            "::",
            stringify!(seqnum_map)
        )
    );
}
extern "C" {
    pub fn bbr_print_wrapper(bbr: *mut BBR);
}
extern "C" {
    pub fn create_bbr() -> *mut BBR;
}
extern "C" {
    pub fn on_ack(
        bbr: *mut BBR,
        now: ::std::os::raw::c_ulonglong,
        seqnum: ::std::os::raw::c_ulonglong,
        rtt: ::std::os::raw::c_ulonglong,
        num_lost: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn on_send(
        bbr: *mut BBR,
        now: ::std::os::raw::c_ulonglong,
        seqnum: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn on_timeout(bbr: *mut BBR);
}
extern "C" {
    pub fn get_cwnd(bbr: *mut BBR) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn get_intersend_time(bbr: *mut BBR) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module {
    pub _address: u8,
}
