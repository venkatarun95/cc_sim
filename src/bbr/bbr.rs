/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align> {
    storage: Storage,
    align: [Align; 0],
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }
}
impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201505;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 23;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __ENUM_IDTYPE_T: u32 = 1;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const _SIGSET_H_types: u32 = 1;
pub const __timespec_defined: u32 = 1;
pub const _STRUCT_TIMEVAL: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_H: u32 = 1;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __have_pthread_attr_t: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const JIFFY_RATIO: u32 = 1000;
pub const US_RATIO: u32 = 1000000;
pub const MS_RATIO: u32 = 1000;
pub const TCP_TS_HZ: u32 = 1000;
pub const TCP_INFINITE_SSTHRESH: u32 = 2147483647;
pub const TCPDIAG_GETSOCK: u32 = 18;
pub const DCCPDIAG_GETSOCK: u32 = 19;
pub const INET_DIAG_GETSOCK_MAX: u32 = 24;
pub const INET_DIAG_NOCOOKIE: i32 = -1;
pub const MSEC_PER_SEC: u32 = 1000;
pub const USEC_PER_MSEC: u32 = 1000;
pub const NSEC_PER_USEC: u32 = 1000;
pub const NSEC_PER_MSEC: u32 = 1000000;
pub const USEC_PER_SEC: u32 = 1000000;
pub const NSEC_PER_SEC: u32 = 1000000000;
pub const FSEC_PER_SEC: u64 = 1000000000000000;
pub const TCP_CA_NAME_MAX: u32 = 16;
pub const TCP_CONG_NON_RESTRICTED: u32 = 1;
pub const TCP_CONG_RTT_STAMP: u32 = 2;
pub const GSO_MAX_SIZE: u32 = 65536;
pub const GSO_MAX_SEGS: u32 = 65535;
pub const MAX_HEADER: u32 = 128;
pub const FLAG_ECE: u32 = 1;
pub const FLAG_DATA_SACKED: u32 = 2;
pub const FLAG_DATA_ACKED: u32 = 4;
pub const FLAG_DATA_LOST: u32 = 8;
pub const FLAG_CA_ALERT: u32 = 3;
pub const FLAG_NOT_DUP: u32 = 4;
pub const FLAG_UNSURE_TSTAMP: u32 = 16;
pub const CONFIG_DEFAULT_TCP_CONG: &'static [u8; 5usize] = b"reno\0";
pub const TCP_CLOSE: u32 = 0;
pub const MAX_TCP_HEADER: u32 = 256;
pub const MAX_TCP_OPTION_SPACE: u32 = 40;
pub const TCP_MIN_SND_MSS: u32 = 48;
pub const TCP_MIN_GSO_SIZE: u32 = 8;
pub const MAX_TCP_WINDOW: u32 = 32767;
pub const TCP_MIN_MSS: u32 = 88;
pub const TCP_BASE_MSS: u32 = 1024;
pub const TCP_PROBE_INTERVAL: u32 = 600;
pub const TCP_PROBE_THRESHOLD: u32 = 8;
pub const TCP_FASTRETRANS_THRESH: u32 = 3;
pub const TCP_MAX_QUICKACKS: u32 = 16;
pub const TCP_MAX_WSCALE: u32 = 14;
pub const TCP_URG_VALID: u32 = 256;
pub const TCP_URG_NOTYET: u32 = 512;
pub const TCP_URG_READ: u32 = 1024;
pub const TCP_RETR1: u32 = 3;
pub const TCP_RETR2: u32 = 15;
pub const TCP_SYN_RETRIES: u32 = 6;
pub const TCP_SYNACK_RETRIES: u32 = 5;
pub const TCP_DELACK_MIN: u32 = 4;
pub const TCP_ATO_MIN: u32 = 4;
pub const TCP_TIMEOUT_MIN: u32 = 2;
pub const TCP_KEEPALIVE_PROBES: u32 = 9;
pub const MAX_TCP_KEEPIDLE: u32 = 32767;
pub const MAX_TCP_KEEPINTVL: u32 = 32767;
pub const MAX_TCP_KEEPCNT: u32 = 127;
pub const MAX_TCP_SYNCNT: u32 = 127;
pub const TCP_PAWS_24DAYS: u32 = 2073600;
pub const TCP_PAWS_MSL: u32 = 60;
pub const TCP_PAWS_WINDOW: u32 = 1;
pub const TCPOPT_NOP: u32 = 1;
pub const TCPOPT_EOL: u32 = 0;
pub const TCPOPT_MSS: u32 = 2;
pub const TCPOPT_WINDOW: u32 = 3;
pub const TCPOPT_SACK_PERM: u32 = 4;
pub const TCPOPT_SACK: u32 = 5;
pub const TCPOPT_TIMESTAMP: u32 = 8;
pub const TCPOPT_MD5SIG: u32 = 19;
pub const TCPOPT_FASTOPEN: u32 = 34;
pub const TCPOPT_EXP: u32 = 254;
pub const TCPOPT_FASTOPEN_MAGIC: u32 = 63881;
pub const TCPOPT_SMC_MAGIC: u32 = 3805594585;
pub const TCPOLEN_MSS: u32 = 4;
pub const TCPOLEN_WINDOW: u32 = 3;
pub const TCPOLEN_SACK_PERM: u32 = 2;
pub const TCPOLEN_TIMESTAMP: u32 = 10;
pub const TCPOLEN_MD5SIG: u32 = 18;
pub const TCPOLEN_FASTOPEN_BASE: u32 = 2;
pub const TCPOLEN_EXP_FASTOPEN_BASE: u32 = 4;
pub const TCPOLEN_EXP_SMC_BASE: u32 = 6;
pub const TCPOLEN_TSTAMP_ALIGNED: u32 = 12;
pub const TCPOLEN_WSCALE_ALIGNED: u32 = 4;
pub const TCPOLEN_SACKPERM_ALIGNED: u32 = 4;
pub const TCPOLEN_SACK_BASE: u32 = 2;
pub const TCPOLEN_SACK_BASE_ALIGNED: u32 = 4;
pub const TCPOLEN_SACK_PERBLOCK: u32 = 8;
pub const TCPOLEN_MD5SIG_ALIGNED: u32 = 20;
pub const TCPOLEN_MSS_ALIGNED: u32 = 4;
pub const TCPOLEN_EXP_SMC_BASE_ALIGNED: u32 = 8;
pub const TCP_NAGLE_OFF: u32 = 1;
pub const TCP_NAGLE_CORK: u32 = 2;
pub const TCP_NAGLE_PUSH: u32 = 4;
pub const TCP_THIN_LINEAR_RETRIES: u32 = 6;
pub const TCP_INIT_CWND: u32 = 10;
pub const TFO_CLIENT_ENABLE: u32 = 1;
pub const TFO_SERVER_ENABLE: u32 = 2;
pub const TFO_CLIENT_NO_COOKIE: u32 = 4;
pub const TFO_SERVER_COOKIE_NOT_REQD: u32 = 512;
pub const TFO_SERVER_WO_SOCKOPT1: u32 = 1024;
extern "C" {
    pub static mut sysctl_tcp_abc: ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut tcp_max_burst: ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut debug_level: ::std::os::raw::c_uchar;
}
pub type wchar_t = ::std::os::raw::c_int;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub __wait_terminated: wait__bindgen_ty_1,
    pub __wait_stopped: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_termsig: ::std::os::raw::c_uint,
        __w_coredump: ::std::os::raw::c_uint,
        __w_retcode: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __w_termsig: u32 = unsafe { ::std::mem::transmute(__w_termsig) };
            __w_termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __w_coredump: u32 = unsafe { ::std::mem::transmute(__w_coredump) };
            __w_coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_retcode: u32 = unsafe { ::std::mem::transmute(__w_retcode) };
            __w_retcode as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u8>,
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __w_stopval: ::std::os::raw::c_uint,
        __w_stopsig: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let __w_stopval: u32 = unsafe { ::std::mem::transmute(__w_stopval) };
            __w_stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let __w_stopsig: u32 = unsafe { ::std::mem::transmute(__w_stopsig) };
            __w_stopsig as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_terminated as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_terminated)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).__wait_stopped as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(__wait_stopped)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __WAIT_STATUS {
    pub __uptr: *mut wait,
    pub __iptr: *mut ::std::os::raw::c_int,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(
        ::std::mem::size_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Size of: ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        ::std::mem::align_of::<__WAIT_STATUS>(),
        8usize,
        concat!("Alignment of ", stringify!(__WAIT_STATUS))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__uptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__uptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__WAIT_STATUS>())).__iptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__WAIT_STATUS),
            "::",
            stringify!(__iptr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: pthread_mutex_t___pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t___pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(pthread_mutex_t___pthread_mutex_s)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__lock as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__count as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__owner as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__nusers as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__kind as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__spins as *const _
                as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__elision as *const _
                as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_mutex_t___pthread_mutex_s>())).__list as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t___pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: pthread_cond_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__futex as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__total_seq as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__total_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__wakeup_seq as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__wakeup_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__woken_seq as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__woken_seq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__mutex as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__mutex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__nwaiters as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__nwaiters)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_cond_t__bindgen_ty_1>())).__broadcast_seq as *const _
                as usize
        },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t__bindgen_ty_1),
            "::",
            stringify!(__broadcast_seq)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: pthread_rwlock_t__bindgen_ty_1,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__lock as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers as *const _
                as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__readers_wakeup as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__readers_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer_wakeup as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer_wakeup)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_readers_queued
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_readers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__nr_writers_queued
                as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__nr_writers_queued)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__rwelision as *const _
                as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad1 as *const _ as usize
        },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__pad2 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<pthread_rwlock_t__bindgen_ty_1>())).__flags as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t__bindgen_ty_1),
            "::",
            stringify!(__flags)
        )
    );
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(
        ::std::mem::size_of::<random_data>(),
        48usize,
        concat!("Size of: ", stringify!(random_data))
    );
    assert_eq!(
        ::std::mem::align_of::<random_data>(),
        8usize,
        concat!("Alignment of ", stringify!(random_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).fptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(fptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).state as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_deg as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_deg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).rand_sep as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(rand_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<random_data>())).end_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(random_data),
            "::",
            stringify!(end_ptr)
        )
    );
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(
        ::std::mem::size_of::<drand48_data>(),
        24usize,
        concat!("Size of: ", stringify!(drand48_data))
    );
    assert_eq!(
        ::std::mem::align_of::<drand48_data>(),
        8usize,
        concat!("Alignment of ", stringify!(drand48_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__x as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__old_x as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__old_x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__c as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__init as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<drand48_data>())).__a as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(drand48_data),
            "::",
            stringify!(__a)
        )
    );
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_congestion_ops {
    pub list: list_head,
    pub flags: ::std::os::raw::c_ulong,
    pub non_restricted: ::std::os::raw::c_int,
    pub init: ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock)>,
    pub release: ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock)>,
    pub ssthresh:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub min_cwnd:
        ::std::option::Option<unsafe extern "C" fn(sk: *const tcp_sock) -> ::std::os::raw::c_ulong>,
    pub cong_avoid: ::std::option::Option<
        unsafe extern "C" fn(
            sk: *mut tcp_sock,
            ack: ::std::os::raw::c_ulong,
            rtt: ::std::os::raw::c_ulong,
            in_flight: ::std::os::raw::c_ulong,
            good_ack: ::std::os::raw::c_int,
        ),
    >,
    pub rtt_sample: ::std::option::Option<
        unsafe extern "C" fn(sk: *mut tcp_sock, usrtt: ::std::os::raw::c_ulong),
    >,
    pub set_state: ::std::option::Option<
        unsafe extern "C" fn(sk: *mut tcp_sock, new_state: ::std::os::raw::c_uchar),
    >,
    pub cwnd_event:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock, ev: tcp_ca_event)>,
    pub undo_cwnd:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub pkts_acked: ::std::option::Option<
        unsafe extern "C" fn(
            sk: *mut tcp_sock,
            num_acked: ::std::os::raw::c_ulong,
            last: ::std::os::raw::c_longlong,
        ),
    >,
    pub get_info: ::std::option::Option<
        unsafe extern "C" fn(sk: *mut tcp_sock, ext: ::std::os::raw::c_ulong, skb: *mut sk_buff),
    >,
    pub cong_control:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock, rs: *const rate_sample)>,
    pub sndbuf_expand:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub min_tso_segs:
        ::std::option::Option<unsafe extern "C" fn(sk: *mut tcp_sock) -> ::std::os::raw::c_ulong>,
    pub name: [::std::os::raw::c_char; 16usize],
    pub owner: *mut module,
}
#[test]
fn bindgen_test_layout_tcp_congestion_ops() {
    assert_eq!(
        ::std::mem::size_of::<tcp_congestion_ops>(),
        176usize,
        concat!("Size of: ", stringify!(tcp_congestion_ops))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_congestion_ops>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_congestion_ops))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).list as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_congestion_ops>())).non_restricted as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(non_restricted)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).init as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).release as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).ssthresh as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(ssthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).min_cwnd as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(min_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).cong_avoid as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(cong_avoid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).rtt_sample as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(rtt_sample)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).set_state as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(set_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).cwnd_event as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(cwnd_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).undo_cwnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(undo_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).pkts_acked as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(pkts_acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).get_info as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(get_info)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).cong_control as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(cong_control)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_congestion_ops>())).sndbuf_expand as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(sndbuf_expand)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).min_tso_segs as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(min_tso_segs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).name as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_congestion_ops>())).owner as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_congestion_ops),
            "::",
            stringify!(owner)
        )
    );
}
extern "C" {
    pub static mut tcp_reno: tcp_congestion_ops;
}
extern "C" {
    pub static mut ktime_get_real: ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn tcp_cong_avoid_register();
}
extern "C" {
    pub fn net_invalid_timestamp() -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn ktime_equal(
        cmp1: ::std::os::raw::c_longlong,
        cmp2: ::std::os::raw::c_longlong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ktime_to_us(kt: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn net_timedelta(t: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_sockid {
    pub idiag_sport: ::std::os::raw::c_uint,
    pub idiag_dport: ::std::os::raw::c_uint,
    pub idiag_src: [::std::os::raw::c_ulong; 4usize],
    pub idiag_dst: [::std::os::raw::c_ulong; 4usize],
    pub idiag_if: ::std::os::raw::c_ulong,
    pub idiag_cookie: [::std::os::raw::c_ulong; 2usize],
}
#[test]
fn bindgen_test_layout_inet_diag_sockid() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_sockid>(),
        96usize,
        concat!("Size of: ", stringify!(inet_diag_sockid))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_sockid>(),
        8usize,
        concat!("Alignment of ", stringify!(inet_diag_sockid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_sockid>())).idiag_sport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_sport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_sockid>())).idiag_dport as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_dport)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_sockid>())).idiag_src as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_src)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_sockid>())).idiag_dst as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_sockid>())).idiag_if as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_if)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_sockid>())).idiag_cookie as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_sockid),
            "::",
            stringify!(idiag_cookie)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_req_raw {
    pub sdiag_family: ::std::os::raw::c_uchar,
    pub sdiag_protocol: ::std::os::raw::c_uchar,
    pub idiag_ext: ::std::os::raw::c_uchar,
    pub sdiag_raw_protocol: ::std::os::raw::c_uchar,
    pub idiag_states: ::std::os::raw::c_ulong,
    pub id: inet_diag_sockid,
}
#[test]
fn bindgen_test_layout_inet_diag_req_raw() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_req_raw>(),
        112usize,
        concat!("Size of: ", stringify!(inet_diag_req_raw))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_req_raw>(),
        8usize,
        concat!("Alignment of ", stringify!(inet_diag_req_raw))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_req_raw>())).sdiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(sdiag_family)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inet_diag_req_raw>())).sdiag_protocol as *const _ as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(sdiag_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_req_raw>())).idiag_ext as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(idiag_ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<inet_diag_req_raw>())).sdiag_raw_protocol as *const _ as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(sdiag_raw_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_req_raw>())).idiag_states as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(idiag_states)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_req_raw>())).id as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_req_raw),
            "::",
            stringify!(id)
        )
    );
}
pub const INET_DIAG_REQ_NONE: _bindgen_ty_1 = 0;
pub const INET_DIAG_REQ_BYTECODE: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_bc_op {
    pub code: ::std::os::raw::c_uchar,
    pub yes: ::std::os::raw::c_uchar,
    pub no: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_inet_diag_bc_op() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_bc_op>(),
        4usize,
        concat!("Size of: ", stringify!(inet_diag_bc_op))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_bc_op>(),
        2usize,
        concat!("Alignment of ", stringify!(inet_diag_bc_op))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_bc_op>())).code as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_bc_op),
            "::",
            stringify!(code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_bc_op>())).yes as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_bc_op),
            "::",
            stringify!(yes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_bc_op>())).no as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_bc_op),
            "::",
            stringify!(no)
        )
    );
}
pub const INET_DIAG_BC_NOP: _bindgen_ty_2 = 0;
pub const INET_DIAG_BC_JMP: _bindgen_ty_2 = 1;
pub const INET_DIAG_BC_S_GE: _bindgen_ty_2 = 2;
pub const INET_DIAG_BC_S_LE: _bindgen_ty_2 = 3;
pub const INET_DIAG_BC_D_GE: _bindgen_ty_2 = 4;
pub const INET_DIAG_BC_D_LE: _bindgen_ty_2 = 5;
pub const INET_DIAG_BC_AUTO: _bindgen_ty_2 = 6;
pub const INET_DIAG_BC_S_COND: _bindgen_ty_2 = 7;
pub const INET_DIAG_BC_D_COND: _bindgen_ty_2 = 8;
pub const INET_DIAG_BC_DEV_COND: _bindgen_ty_2 = 9;
pub const INET_DIAG_BC_MARK_COND: _bindgen_ty_2 = 10;
pub const INET_DIAG_BC_S_EQ: _bindgen_ty_2 = 11;
pub const INET_DIAG_BC_D_EQ: _bindgen_ty_2 = 12;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug)]
pub struct inet_diag_hostcond {
    pub family: ::std::os::raw::c_uchar,
    pub prefix_len: ::std::os::raw::c_uchar,
    pub port: ::std::os::raw::c_int,
    pub addr: __IncompleteArrayField<::std::os::raw::c_ulong>,
}
#[test]
fn bindgen_test_layout_inet_diag_hostcond() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_hostcond>(),
        8usize,
        concat!("Size of: ", stringify!(inet_diag_hostcond))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_hostcond>(),
        8usize,
        concat!("Alignment of ", stringify!(inet_diag_hostcond))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_hostcond>())).family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_hostcond>())).prefix_len as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(prefix_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_hostcond>())).port as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_hostcond>())).addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_hostcond),
            "::",
            stringify!(addr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_markcond {
    pub mark: ::std::os::raw::c_ulong,
    pub mask: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_inet_diag_markcond() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_markcond>(),
        16usize,
        concat!("Size of: ", stringify!(inet_diag_markcond))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_markcond>(),
        8usize,
        concat!("Alignment of ", stringify!(inet_diag_markcond))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_markcond>())).mark as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_markcond),
            "::",
            stringify!(mark)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_markcond>())).mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_markcond),
            "::",
            stringify!(mask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_msg {
    pub idiag_family: ::std::os::raw::c_uchar,
    pub idiag_state: ::std::os::raw::c_uchar,
    pub idiag_timer: ::std::os::raw::c_uchar,
    pub idiag_retrans: ::std::os::raw::c_uchar,
    pub id: inet_diag_sockid,
    pub idiag_expires: ::std::os::raw::c_ulong,
    pub idiag_rqueue: ::std::os::raw::c_ulong,
    pub idiag_wqueue: ::std::os::raw::c_ulong,
    pub idiag_uid: ::std::os::raw::c_ulong,
    pub idiag_inode: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_inet_diag_msg() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_msg>(),
        144usize,
        concat!("Size of: ", stringify!(inet_diag_msg))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_msg>(),
        8usize,
        concat!("Alignment of ", stringify!(inet_diag_msg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_state as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_timer as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_retrans as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_retrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).id as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_expires as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_expires)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_rqueue as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_rqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_wqueue as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_wqueue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_uid as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_msg>())).idiag_inode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_msg),
            "::",
            stringify!(idiag_inode)
        )
    );
}
pub const INET_DIAG_NONE: _bindgen_ty_3 = 0;
pub const INET_DIAG_MEMINFO: _bindgen_ty_3 = 1;
pub const INET_DIAG_INFO: _bindgen_ty_3 = 2;
pub const INET_DIAG_VEGASINFO: _bindgen_ty_3 = 3;
pub const INET_DIAG_CONG: _bindgen_ty_3 = 4;
pub const INET_DIAG_TOS: _bindgen_ty_3 = 5;
pub const INET_DIAG_TCLASS: _bindgen_ty_3 = 6;
pub const INET_DIAG_SKMEMINFO: _bindgen_ty_3 = 7;
pub const INET_DIAG_SHUTDOWN: _bindgen_ty_3 = 8;
pub const INET_DIAG_DCTCPINFO: _bindgen_ty_3 = 9;
pub const INET_DIAG_PROTOCOL: _bindgen_ty_3 = 10;
pub const INET_DIAG_SKV6ONLY: _bindgen_ty_3 = 11;
pub const INET_DIAG_LOCALS: _bindgen_ty_3 = 12;
pub const INET_DIAG_PEERS: _bindgen_ty_3 = 13;
pub const INET_DIAG_PAD: _bindgen_ty_3 = 14;
pub const INET_DIAG_MARK: _bindgen_ty_3 = 15;
pub const INET_DIAG_BBRINFO: _bindgen_ty_3 = 16;
pub const INET_DIAG_CLASS_ID: _bindgen_ty_3 = 17;
pub const INET_DIAG_MD5SIG: _bindgen_ty_3 = 18;
pub const INET_DIAG_ULP_INFO: _bindgen_ty_3 = 19;
pub const __INET_DIAG_MAX: _bindgen_ty_3 = 20;
pub type _bindgen_ty_3 = u32;
pub const INET_ULP_INFO_UNSPEC: _bindgen_ty_4 = 0;
pub const INET_ULP_INFO_NAME: _bindgen_ty_4 = 1;
pub const INET_ULP_INFO_TLS: _bindgen_ty_4 = 2;
pub const __INET_ULP_INFO_MAX: _bindgen_ty_4 = 3;
pub type _bindgen_ty_4 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct inet_diag_meminfo {
    pub idiag_rmem: ::std::os::raw::c_ulong,
    pub idiag_wmem: ::std::os::raw::c_ulong,
    pub idiag_fmem: ::std::os::raw::c_ulong,
    pub idiag_tmem: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_inet_diag_meminfo() {
    assert_eq!(
        ::std::mem::size_of::<inet_diag_meminfo>(),
        32usize,
        concat!("Size of: ", stringify!(inet_diag_meminfo))
    );
    assert_eq!(
        ::std::mem::align_of::<inet_diag_meminfo>(),
        8usize,
        concat!("Alignment of ", stringify!(inet_diag_meminfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_meminfo>())).idiag_rmem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_rmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_meminfo>())).idiag_wmem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_wmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_meminfo>())).idiag_fmem as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_fmem)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<inet_diag_meminfo>())).idiag_tmem as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(inet_diag_meminfo),
            "::",
            stringify!(idiag_tmem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcpvegas_info {
    pub tcpv_enabled: ::std::os::raw::c_ulong,
    pub tcpv_rttcnt: ::std::os::raw::c_ulong,
    pub tcpv_rtt: ::std::os::raw::c_ulong,
    pub tcpv_minrtt: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_tcpvegas_info() {
    assert_eq!(
        ::std::mem::size_of::<tcpvegas_info>(),
        32usize,
        concat!("Size of: ", stringify!(tcpvegas_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcpvegas_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tcpvegas_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcpvegas_info>())).tcpv_enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcpvegas_info>())).tcpv_rttcnt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_rttcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcpvegas_info>())).tcpv_rtt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_rtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcpvegas_info>())).tcpv_minrtt as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcpvegas_info),
            "::",
            stringify!(tcpv_minrtt)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_dctcp_info {
    pub dctcp_enabled: ::std::os::raw::c_uint,
    pub dctcp_ce_state: ::std::os::raw::c_uint,
    pub dctcp_alpha: ::std::os::raw::c_ulong,
    pub dctcp_ab_ecn: ::std::os::raw::c_ulong,
    pub dctcp_ab_tot: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_tcp_dctcp_info() {
    assert_eq!(
        ::std::mem::size_of::<tcp_dctcp_info>(),
        32usize,
        concat!("Size of: ", stringify!(tcp_dctcp_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_dctcp_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_dctcp_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_dctcp_info>())).dctcp_enabled as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_enabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_dctcp_info>())).dctcp_ce_state as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_ce_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_dctcp_info>())).dctcp_alpha as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_alpha)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_dctcp_info>())).dctcp_ab_ecn as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_ab_ecn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_dctcp_info>())).dctcp_ab_tot as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_dctcp_info),
            "::",
            stringify!(dctcp_ab_tot)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_bbr_info {
    pub bbr_bw_lo: ::std::os::raw::c_ulong,
    pub bbr_bw_hi: ::std::os::raw::c_ulong,
    pub bbr_min_rtt: ::std::os::raw::c_ulong,
    pub bbr_pacing_gain: ::std::os::raw::c_ulong,
    pub bbr_cwnd_gain: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_tcp_bbr_info() {
    assert_eq!(
        ::std::mem::size_of::<tcp_bbr_info>(),
        40usize,
        concat!("Size of: ", stringify!(tcp_bbr_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_bbr_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_bbr_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_bbr_info>())).bbr_bw_lo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_bw_lo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_bbr_info>())).bbr_bw_hi as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_bw_hi)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_bbr_info>())).bbr_min_rtt as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_min_rtt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_bbr_info>())).bbr_pacing_gain as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_pacing_gain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_bbr_info>())).bbr_cwnd_gain as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_bbr_info),
            "::",
            stringify!(bbr_cwnd_gain)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union tcp_cc_info {
    pub vegas: tcpvegas_info,
    pub dctcp: tcp_dctcp_info,
    pub bbr: tcp_bbr_info,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_tcp_cc_info() {
    assert_eq!(
        ::std::mem::size_of::<tcp_cc_info>(),
        40usize,
        concat!("Size of: ", stringify!(tcp_cc_info))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_cc_info>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_cc_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_cc_info>())).vegas as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cc_info),
            "::",
            stringify!(vegas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_cc_info>())).dctcp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cc_info),
            "::",
            stringify!(dctcp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_cc_info>())).bbr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_cc_info),
            "::",
            stringify!(bbr)
        )
    );
}
pub const tcp_ca_event_CA_EVENT_TX_START: tcp_ca_event = 0;
pub const tcp_ca_event_CA_EVENT_CWND_RESTART: tcp_ca_event = 1;
pub const tcp_ca_event_CA_EVENT_COMPLETE_CWR: tcp_ca_event = 2;
pub const tcp_ca_event_CA_EVENT_FRTO: tcp_ca_event = 3;
pub const tcp_ca_event_CA_EVENT_LOSS: tcp_ca_event = 4;
pub const tcp_ca_event_CA_EVENT_FAST_ACK: tcp_ca_event = 5;
pub const tcp_ca_event_CA_EVENT_SLOW_ACK: tcp_ca_event = 6;
pub type tcp_ca_event = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cc_param_list {
    pub name: *const ::std::os::raw::c_char,
    pub type_: *const ::std::os::raw::c_char,
    pub description: *const ::std::os::raw::c_char,
    pub ptr: *const ::std::os::raw::c_void,
    pub next: *mut cc_param_list,
}
#[test]
fn bindgen_test_layout_cc_param_list() {
    assert_eq!(
        ::std::mem::size_of::<cc_param_list>(),
        40usize,
        concat!("Size of: ", stringify!(cc_param_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cc_param_list>(),
        8usize,
        concat!("Alignment of ", stringify!(cc_param_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_param_list>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_param_list),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_param_list>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_param_list),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_param_list>())).description as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_param_list),
            "::",
            stringify!(description)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_param_list>())).ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_param_list),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_param_list>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_param_list),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cc_list {
    pub proto: *const ::std::os::raw::c_char,
    pub param_head: *mut cc_param_list,
    pub next: *mut cc_list,
}
#[test]
fn bindgen_test_layout_cc_list() {
    assert_eq!(
        ::std::mem::size_of::<cc_list>(),
        24usize,
        concat!("Size of: ", stringify!(cc_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cc_list>(),
        8usize,
        concat!("Alignment of ", stringify!(cc_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_list>())).proto as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_list),
            "::",
            stringify!(proto)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_list>())).param_head as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_list),
            "::",
            stringify!(param_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cc_list>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cc_list),
            "::",
            stringify!(next)
        )
    );
}
extern "C" {
    pub static mut cc_list_head: *mut cc_list;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct list_head {
    pub prev: *mut list_head,
    pub next: *mut list_head,
    pub file_name: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_list_head() {
    assert_eq!(
        ::std::mem::size_of::<list_head>(),
        24usize,
        concat!("Size of: ", stringify!(list_head))
    );
    assert_eq!(
        ::std::mem::align_of::<list_head>(),
        8usize,
        concat!("Alignment of ", stringify!(list_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<list_head>())).file_name as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(list_head),
            "::",
            stringify!(file_name)
        )
    );
}
extern "C" {
    pub static mut cc_list_changed: ::std::os::raw::c_uchar;
}
extern "C" {
    pub static mut ns_tcp_cong_list: list_head;
}
extern "C" {
    pub static mut last_added: *mut list_head;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_options_received {
    pub rcv_tsval: ::std::os::raw::c_ulong,
    pub rcv_tsecr: ::std::os::raw::c_ulong,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u16>,
    pub __bindgen_padding_0: [u16; 3usize],
}
#[test]
fn bindgen_test_layout_tcp_options_received() {
    assert_eq!(
        ::std::mem::size_of::<tcp_options_received>(),
        24usize,
        concat!("Size of: ", stringify!(tcp_options_received))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_options_received>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_options_received))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_options_received>())).rcv_tsval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_options_received),
            "::",
            stringify!(rcv_tsval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_options_received>())).rcv_tsecr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_options_received),
            "::",
            stringify!(rcv_tsecr)
        )
    );
}
impl tcp_options_received {
    #[inline]
    pub fn saw_tstamp(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_saw_tstamp(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn dump_xxx(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 15u8) as u32) }
    }
    #[inline]
    pub fn set_dump_xxx(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 15u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        saw_tstamp: ::std::os::raw::c_uint,
        dump_xxx: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let saw_tstamp: u32 = unsafe { ::std::mem::transmute(saw_tstamp) };
            saw_tstamp as u64
        });
        __bindgen_bitfield_unit.set(1usize, 15u8, {
            let dump_xxx: u32 = unsafe { ::std::mem::transmute(dump_xxx) };
            dump_xxx as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct minmax_sample {
    pub t: ::std::os::raw::c_ulong,
    pub v: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_minmax_sample() {
    assert_eq!(
        ::std::mem::size_of::<minmax_sample>(),
        16usize,
        concat!("Size of: ", stringify!(minmax_sample))
    );
    assert_eq!(
        ::std::mem::align_of::<minmax_sample>(),
        8usize,
        concat!("Alignment of ", stringify!(minmax_sample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<minmax_sample>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(minmax_sample),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<minmax_sample>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(minmax_sample),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct minmax {
    pub s: [minmax_sample; 3usize],
}
#[test]
fn bindgen_test_layout_minmax() {
    assert_eq!(
        ::std::mem::size_of::<minmax>(),
        48usize,
        concat!("Size of: ", stringify!(minmax))
    );
    assert_eq!(
        ::std::mem::align_of::<minmax>(),
        8usize,
        concat!("Alignment of ", stringify!(minmax))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<minmax>())).s as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(minmax), "::", stringify!(s))
    );
}
extern "C" {
    pub fn minmax_running_max(
        m: *mut minmax,
        win: ::std::os::raw::c_ulong,
        t: ::std::os::raw::c_ulong,
        meas: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn minmax_running_min(
        m: *mut minmax,
        win: ::std::os::raw::c_ulong,
        t: ::std::os::raw::c_ulong,
        meas: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_sock {
    pub sk_state: ::std::os::raw::c_int,
    pub snd_nxt: ::std::os::raw::c_ulong,
    pub snd_una: ::std::os::raw::c_ulong,
    pub mss_cache: ::std::os::raw::c_ulong,
    pub tcp_mstamp: ::std::os::raw::c_ulonglong,
    pub srtt_us: ::std::os::raw::c_ulonglong,
    pub mdev_us: ::std::os::raw::c_ulong,
    pub mdev_max_us: ::std::os::raw::c_ulong,
    pub rttvar_us: ::std::os::raw::c_ulong,
    pub rtt_seq: ::std::os::raw::c_ulong,
    pub rtt_min: minmax,
    pub packets_out: ::std::os::raw::c_ulong,
    pub left_out: ::std::os::raw::c_ulong,
    pub retrans_out: ::std::os::raw::c_ulong,
    pub rx_opt: tcp_options_received,
    pub snd_ssthresh: ::std::os::raw::c_ulong,
    pub snd_cwnd: ::std::os::raw::c_ulong,
    pub snd_cwnd_cnt: ::std::os::raw::c_uint,
    pub snd_cwnd_clamp: ::std::os::raw::c_uint,
    pub snd_cwnd_stamp: ::std::os::raw::c_ulong,
    pub bytes_acked: ::std::os::raw::c_ulong,
    pub lost: ::std::os::raw::c_ulong,
    pub app_limited: ::std::os::raw::c_ulong,
    pub first_tx_mstamp: ::std::os::raw::c_ulonglong,
    pub delivered_mstamp: ::std::os::raw::c_ulonglong,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub rate_delivered: ::std::os::raw::c_ulong,
    pub rate_interval_us: ::std::os::raw::c_ulong,
    pub sk_pacing_status: ::std::os::raw::c_ulong,
    pub sk_pacing_rate: ::std::os::raw::c_ulong,
    pub sk_max_pacing_rate: ::std::os::raw::c_ulong,
    pub sk_pacing_shift: ::std::os::raw::c_uchar,
    pub delivered: ::std::os::raw::c_ulong,
    pub tcp_wstamp_ns: ::std::os::raw::c_ulonglong,
    pub tcp_clock_cache: ::std::os::raw::c_ulonglong,
    pub send_timestamp_us: ::std::os::raw::c_ulonglong,
    pub intersend_time: ::std::os::raw::c_ulonglong,
    pub lost_out: ::std::os::raw::c_ulong,
    pub sacked_out: ::std::os::raw::c_ulong,
    pub fackets_out: ::std::os::raw::c_ulong,
    pub icsk_ca_ops: *mut tcp_congestion_ops,
    pub icsk_ca_state: ::std::os::raw::c_uchar,
    pub icsk_ca_priv: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout_tcp_sock() {
    assert_eq!(
        ::std::mem::size_of::<tcp_sock>(),
        512usize,
        concat!("Size of: ", stringify!(tcp_sock))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_sock>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_sock))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_state as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_nxt as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_nxt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_una as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_una)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).mss_cache as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(mss_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).tcp_mstamp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(tcp_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).srtt_us as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(srtt_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).mdev_us as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(mdev_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).mdev_max_us as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(mdev_max_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rttvar_us as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rttvar_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rtt_seq as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rtt_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rtt_min as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rtt_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).packets_out as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(packets_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).left_out as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(left_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).retrans_out as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(retrans_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rx_opt as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rx_opt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_ssthresh as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_ssthresh)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd_cnt as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd_cnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd_clamp as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd_clamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).snd_cwnd_stamp as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(snd_cwnd_stamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).bytes_acked as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(bytes_acked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).lost as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(lost)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).app_limited as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(app_limited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).first_tx_mstamp as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(first_tx_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).delivered_mstamp as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(delivered_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rate_delivered as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rate_delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).rate_interval_us as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(rate_interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_pacing_status as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_pacing_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_pacing_rate as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_pacing_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_max_pacing_rate as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_max_pacing_rate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sk_pacing_shift as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sk_pacing_shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).delivered as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).tcp_wstamp_ns as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(tcp_wstamp_ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).tcp_clock_cache as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(tcp_clock_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).send_timestamp_us as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(send_timestamp_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).intersend_time as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(intersend_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).lost_out as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(lost_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).sacked_out as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(sacked_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).fackets_out as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(fackets_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).icsk_ca_ops as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(icsk_ca_ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).icsk_ca_state as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(icsk_ca_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_sock>())).icsk_ca_priv as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_sock),
            "::",
            stringify!(icsk_ca_priv)
        )
    );
}
impl tcp_sock {
    #[inline]
    pub fn rate_app_limited(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_rate_app_limited(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rate_app_limited: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let rate_app_limited: u8 = unsafe { ::std::mem::transmute(rate_app_limited) };
            rate_app_limited as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_skb_cb {
    pub seq: ::std::os::raw::c_ulong,
    pub end_seq: ::std::os::raw::c_ulong,
    pub tcp_flags: ::std::os::raw::c_uchar,
    pub sacked: ::std::os::raw::c_uchar,
    pub ip_dsfield: ::std::os::raw::c_uchar,
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize], u8>,
    pub ack_seq: ::std::os::raw::c_ulong,
    pub tx: tcp_skb_cb__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tcp_skb_cb__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u32>,
    pub delivered: ::std::os::raw::c_ulong,
    pub first_tx_mstamp: ::std::os::raw::c_ulonglong,
    pub delivered_mstamp: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_tcp_skb_cb__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tcp_skb_cb__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(tcp_skb_cb__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_skb_cb__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_skb_cb__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_skb_cb__bindgen_ty_1>())).delivered as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb__bindgen_ty_1),
            "::",
            stringify!(delivered)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_skb_cb__bindgen_ty_1>())).first_tx_mstamp as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb__bindgen_ty_1),
            "::",
            stringify!(first_tx_mstamp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<tcp_skb_cb__bindgen_ty_1>())).delivered_mstamp as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb__bindgen_ty_1),
            "::",
            stringify!(delivered_mstamp)
        )
    );
}
impl tcp_skb_cb__bindgen_ty_1 {
    #[inline]
    pub fn in_flight(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 30u8) as u64) }
    }
    #[inline]
    pub fn set_in_flight(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 30u8, val as u64)
        }
    }
    #[inline]
    pub fn is_app_limited(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(30usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_is_app_limited(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(30usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_ulong {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(31usize, 1u8) as u64) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_ulong) {
        unsafe {
            let val: u64 = ::std::mem::transmute(val);
            self._bitfield_1.set(31usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        in_flight: ::std::os::raw::c_ulong,
        is_app_limited: ::std::os::raw::c_ulong,
        unused: ::std::os::raw::c_ulong,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u32> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u32> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 30u8, {
            let in_flight: u64 = unsafe { ::std::mem::transmute(in_flight) };
            in_flight as u64
        });
        __bindgen_bitfield_unit.set(30usize, 1u8, {
            let is_app_limited: u64 = unsafe { ::std::mem::transmute(is_app_limited) };
            is_app_limited as u64
        });
        __bindgen_bitfield_unit.set(31usize, 1u8, {
            let unused: u64 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_tcp_skb_cb() {
    assert_eq!(
        ::std::mem::size_of::<tcp_skb_cb>(),
        64usize,
        concat!("Size of: ", stringify!(tcp_skb_cb))
    );
    assert_eq!(
        ::std::mem::align_of::<tcp_skb_cb>(),
        8usize,
        concat!("Alignment of ", stringify!(tcp_skb_cb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).seq as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).end_seq as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(end_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).tcp_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(tcp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).sacked as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(sacked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).ip_dsfield as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(ip_dsfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).ack_seq as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(ack_seq)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tcp_skb_cb>())).tx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tcp_skb_cb),
            "::",
            stringify!(tx)
        )
    );
}
impl tcp_skb_cb {
    #[inline]
    pub fn txstamp_ack(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_txstamp_ack(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn eor(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_eor(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn has_rxtstamp(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set_has_rxtstamp(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn unused(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 5u8) as u8) }
    }
    #[inline]
    pub fn set_unused(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 5u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        txstamp_ack: ::std::os::raw::c_uchar,
        eor: ::std::os::raw::c_uchar,
        has_rxtstamp: ::std::os::raw::c_uchar,
        unused: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let txstamp_ack: u8 = unsafe { ::std::mem::transmute(txstamp_ack) };
            txstamp_ack as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let eor: u8 = unsafe { ::std::mem::transmute(eor) };
            eor as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let has_rxtstamp: u8 = unsafe { ::std::mem::transmute(has_rxtstamp) };
            has_rxtstamp as u64
        });
        __bindgen_bitfield_unit.set(3usize, 5u8, {
            let unused: u8 = unsafe { ::std::mem::transmute(unused) };
            unused as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sk_buff {
    pub cb: tcp_skb_cb,
    pub skb_mstamp_ns: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_sk_buff() {
    assert_eq!(
        ::std::mem::size_of::<sk_buff>(),
        72usize,
        concat!("Size of: ", stringify!(sk_buff))
    );
    assert_eq!(
        ::std::mem::align_of::<sk_buff>(),
        8usize,
        concat!("Alignment of ", stringify!(sk_buff))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sk_buff>())).cb as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sk_buff),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sk_buff>())).skb_mstamp_ns as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(sk_buff),
            "::",
            stringify!(skb_mstamp_ns)
        )
    );
}
extern "C" {
    pub static mut tcp_init_congestion_ops: tcp_congestion_ops;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rate_sample {
    pub prior_mstamp: ::std::os::raw::c_ulonglong,
    pub prior_delivered: ::std::os::raw::c_ulong,
    pub delivered: ::std::os::raw::c_long,
    pub interval_us: ::std::os::raw::c_long,
    pub snd_interval_us: ::std::os::raw::c_ulong,
    pub rcv_interval_us: ::std::os::raw::c_ulong,
    pub rtt_us: ::std::os::raw::c_long,
    pub losses: ::std::os::raw::c_int,
    pub acked_sacked: ::std::os::raw::c_ulong,
    pub prior_in_flight: ::std::os::raw::c_ulong,
    pub is_app_limited: bool,
    pub is_retrans: bool,
    pub is_ack_delayed: bool,
}
#[test]
fn bindgen_test_layout_rate_sample() {
    assert_eq!(
        ::std::mem::size_of::<rate_sample>(),
        88usize,
        concat!("Size of: ", stringify!(rate_sample))
    );
    assert_eq!(
        ::std::mem::align_of::<rate_sample>(),
        8usize,
        concat!("Alignment of ", stringify!(rate_sample))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).prior_mstamp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(prior_mstamp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).prior_delivered as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(prior_delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).delivered as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(delivered)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).interval_us as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).snd_interval_us as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(snd_interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).rcv_interval_us as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(rcv_interval_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).rtt_us as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(rtt_us)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).losses as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(losses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).acked_sacked as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(acked_sacked)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).prior_in_flight as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(prior_in_flight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).is_app_limited as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(is_app_limited)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).is_retrans as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(is_retrans)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rate_sample>())).is_ack_delayed as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(rate_sample),
            "::",
            stringify!(is_ack_delayed)
        )
    );
}
pub const sk_pacing_SK_PACING_NONE: sk_pacing = 0;
pub const sk_pacing_SK_PACING_NEEDED: sk_pacing = 1;
pub const sk_pacing_SK_PACING_FQ: sk_pacing = 2;
pub type sk_pacing = u32;
pub const tcp_ca_state_TCP_CA_Open: tcp_ca_state = 0;
pub const tcp_ca_state_TCP_CA_Disorder: tcp_ca_state = 1;
pub const tcp_ca_state_TCP_CA_CWR: tcp_ca_state = 2;
pub const tcp_ca_state_TCP_CA_Recovery: tcp_ca_state = 3;
pub const tcp_ca_state_TCP_CA_Loss: tcp_ca_state = 4;
pub type tcp_ca_state = u32;
extern "C" {
    pub static mut gso_max_size: ::std::os::raw::c_uint;
}
extern "C" {
    pub static mut gso_max_segs: ::std::os::raw::c_uint;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct node {
    pub next: *mut node,
    pub skb: sk_buff,
    pub seqnum: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_node() {
    assert_eq!(
        ::std::mem::size_of::<node>(),
        88usize,
        concat!("Size of: ", stringify!(node))
    );
    assert_eq!(
        ::std::mem::align_of::<node>(),
        8usize,
        concat!("Alignment of ", stringify!(node))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).skb as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(node), "::", stringify!(skb))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<node>())).seqnum as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(node),
            "::",
            stringify!(seqnum)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct map {
    pub size: ::std::os::raw::c_int,
    pub start: *mut node,
}
#[test]
fn bindgen_test_layout_map() {
    assert_eq!(
        ::std::mem::size_of::<map>(),
        16usize,
        concat!("Size of: ", stringify!(map))
    );
    assert_eq!(
        ::std::mem::align_of::<map>(),
        8usize,
        concat!("Alignment of ", stringify!(map))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<map>())).size as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(map), "::", stringify!(size))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<map>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(map),
            "::",
            stringify!(start)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BBR {
    pub sk: tcp_sock,
    pub padding: [::std::os::raw::c_uchar; 64usize],
    pub rs: rate_sample,
    pub seqnum_map: map,
}
#[test]
fn bindgen_test_layout_BBR() {
    assert_eq!(
        ::std::mem::size_of::<BBR>(),
        680usize,
        concat!("Size of: ", stringify!(BBR))
    );
    assert_eq!(
        ::std::mem::align_of::<BBR>(),
        8usize,
        concat!("Alignment of ", stringify!(BBR))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).sk as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(BBR), "::", stringify!(sk))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).padding as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(BBR),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).rs as *const _ as usize },
        576usize,
        concat!("Offset of field: ", stringify!(BBR), "::", stringify!(rs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<BBR>())).seqnum_map as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(BBR),
            "::",
            stringify!(seqnum_map)
        )
    );
}
extern "C" {
    pub fn tcp_rate_skb_sent(
        bbr: *mut BBR,
        now: ::std::os::raw::c_ulonglong,
        seqnum: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn tcp_rate_gen(
        bbr: *mut BBR,
        newly_delivered: ::std::os::raw::c_ulonglong,
        rtt: ::std::os::raw::c_ulonglong,
        num_lost: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn set_state(bbr: *mut BBR, new_state: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn cwnd_event(bbr: *mut BBR, ev: tcp_ca_event);
}
extern "C" {
    pub fn bbr_print_wrapper(bbr: *mut BBR);
}
extern "C" {
    pub fn create_bbr() -> *mut BBR;
}
extern "C" {
    pub fn on_ack(
        bbr: *mut BBR,
        now: ::std::os::raw::c_ulonglong,
        seqnum: ::std::os::raw::c_ulonglong,
        rtt: ::std::os::raw::c_ulonglong,
        num_lost: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn on_send(
        bbr: *mut BBR,
        now: ::std::os::raw::c_ulonglong,
        seqnum: ::std::os::raw::c_ulonglong,
    );
}
extern "C" {
    pub fn on_timeout(bbr: *mut BBR);
}
extern "C" {
    pub fn get_cwnd(bbr: *mut BBR) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn get_intersend_time(bbr: *mut BBR) -> ::std::os::raw::c_ulonglong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct module {
    pub _address: u8,
}
